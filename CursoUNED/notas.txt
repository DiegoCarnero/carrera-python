df.interpolate: rellenar valores NaN con cierto método de interpolación
si tiene multiindex solo method='linear'
ej:
    s = pd.Series([2, np.nan, np.nan, np.nan, np.nan, np.nan, 9, np.nan, np.nan, np.nan, np.nan, 15])
    s.interpolate(method = 'linear', limit=3, axis=0) 
    0      2.000000
    1      3.166667
    2      4.333333
    3      5.500000
    4           NaN
    5           NaN
    6      9.000000
    7     10.200000
    8     11.400000
    9     12.600000
    10          NaN
    11    15.000000

SQL:
crear DB:
    engine = create_engine('sqlite:///your_database.db', echo=True)

crear class_base/schema:
    class_base = declarative_base(bind=motor) 
    #Borrar tablas de mi base de datos
    class_base.metadata.drop_all(motor) 
crear tabla con clase Table():
    your_table = Table(
        'your_table_name', Metadata(),
        Column('id', Integer, primary_key=True),
        Column('name', String),
        Column('lastname', String),
    )
    o
    class Vehiculo(class_base):
        __tablename__ = "vehiculos"
        
        Matricula = Column(NVARCHAR(7), primary_key=True)
        Marca = Column(NVARCHAR(20))
        Kilometraje = Column(Numeric)
class_base.metadata.create_all(motor) lo coge magicamente (?)
        o una sola con
your_table.create(engine)

admite sentencias sql a pelo con:
    from sqlalchemy.sql import text
    s = text('SELECT * FROM vehiculos WHERE Matricula like "%V"')
si no:
    j = session.query(Usuario.FirstName, Orden.Date).join(Orden).filter(Orden.UsuarioId==1)


QUERY A DATAFRAME:
si query:
    def conseguir_resultados(query):
        global motor
        q = query.statement if isinstance(query, sqlalchemy.orm.query.Query) else query
        return pd.read_sql(q, motor)
    def mostrar_resultados(query):
        df = conseguir_resultados(query)
        display(df)

si sentencia sql:
    df = pd.read_sql(s, session.bind)

Clasificación:
    datos...
        numéricos: escalado o normalización
            -intervalo: rango donde se mueve una variable 
            -ratio:
        categóricos:
            -nominal: las clasifica con balores binarios
            -ordinal: las categorias tienen un orden. Se le da a cada una un índice

Criterio para eliminar:
    -Nº de datos:  
    -Si hay datos temporales:
Criterio para interpolar, enmascarar, etc:
    -Cuantos datos faltantes continuos:
    -Si las filas son datos de elementos diferentenes:
        Ej: cada fila es un alumno, no tiene sentido interpolar las notas en una asignatura
    -Enmascaramiento evita lios:
        No eliminas ni inventas datos

Muestreo de datos (Feature sampling):
intentar mantener aprox las mismas distribuciones que el conjunto original (Simple Random Sampling)
conservar la variabilidad de la población
Con muestras desequilibradas este tipo de algoritmo puede no funcionar bien, más apropiado podría ser Stratified Sampling

Reduccion de dimensiones: quedarse con las variables más relevantes (mayor correlacion)
    PCA: multiplica las variables por un coeficiente y se queda con una única variable

random_state = semilla

scipy.stats.zscore: detectar outliers. Cuanto más desviado de la media, más outlier es, más alto el valor
unidad: desviación tipica

hacer np.sqrt(metrics.mean_squared_error()) para que no compense errores positivios con negativos

cross_val_score(cv=5): divide el dataset en 5, entrena 1 y prueba con los otros cuatro sucesivamente

REDES NEURONALES:
meter demasiadas capas puede causar overfitting