para poner graficos en la misma imagen simplemente seponen en la misma celda
punto y coma al final de la celda para que no muestre el tipo de dato y esas vainas
hitograma t deja definir el numero de bins

plt.subplot devuelve fig, y ax. ax es para dibujarlo.
el tipo se elige con métodos: .hist, .scatter, etc
data['city'].value:counts() t dice cuantas veces aparece cada ciudad, admite normalize=True

ax.table para mostrar un dataframe

df.corr(): correlacion entre columnas
mostrarla en un mapa de calor con:
    plt.xticks(np.arange(13), data.columns, rotation = 'vertical');
funciona pero salta un error. Poner data.corr().columns

fig.cga(projection=) no va. Reemplazo aproximado en el notebook

imagenes a matrices con np.array(image)
Leer imagen con:
    image = matplotlib.image.PIL.Image.open(urllib.request.urlopen("https://raw.githubusercontent.com/tphinkle/tphinkle.github.io/master/images/2017-8-15/mnist_0.png"))
    plt.imshow(image)
A array con:
    np.array(image)
Zoom: recortando la matrix
    lum_img = image[100:-100, :, 1]
Mapa de color: 
    cmp=
Ver leyenda de color:
    imgplot = plt.imshow(lum_img)
    plt.colorbar()

seaborn:
.relplot(kind=) para cambiar entre linea, puntos, etc
.boxplot puede usarse con .catplot(kinda='box')
orient= para cambiar orientación. Hay que cambiar x <-> y

kinds:"strip", "swarm", "box", "violin",
    "boxen", "point", "bar", or "count"
ci: intervalo de confianza. =None para quitarlo
order: If order is greater than 1, use numpy.polyfit to estimate a polynomial regression.

KDE kernel density estimation:
https://mathisonian.github.io/kde/
Empirical cumulative distributions:
la altura de la curva refleja la proporción de observaciones con un valor menor.
"20% de las personas son menores de 20 años, el 60% son menores de 40"

varios gráficos diferenciados por columna: FacetGrid
PairGrid: representa columna-columna

sns.set_theme() resetea el tema
sns.set_context() contexto de presentación del grafico (?)